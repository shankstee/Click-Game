{"version":3,"sources":["components/Cards/cards.js","components/Nav/navBar.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","react_default","a","createElement","Fragment","onClick","handleClick","id","clicked","className","src","image","alt","NavBar","href","currentScore","highScore","App","state","images","alreadyClicked","handleImgClick","_callee","regenerator_default","wrap","_context","prev","next","_this","map","includes","alert","setState","concat","Object","toConsumableArray","console","log","stop","this","random","arr","sort","b","Math","_this2","navBar","cards","key","img","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAYeA,EANA,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,OAAKE,QAAW,kBAAML,EAAMM,YAAYN,EAAMO,GAAIP,EAAMQ,UAAUC,UAAU,UAAUC,IAAKV,EAAMW,MAAOC,IAAI,OCUrGC,EAhBA,SAACb,GAAD,OACRC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UACbR,EAAAC,EAAAC,cAAA,KAAGM,UAAU,eAAeK,KAAK,KAC/Bb,EAAAC,EAAAC,cAAA,4BAEFF,EAAAC,EAAAC,cAAA,OAAKI,GAAG,UACNN,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMM,UAAU,aAAhB,WAAH,IAA+CT,EAAMe,cACrDd,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMM,UAAU,aAAhB,eAAH,IAAmDT,EAAMgB,sBC8EtDC,oNAhFXC,MAAQ,CACNC,SACAH,UAAW,EACXD,aAAc,EACdK,eAAgB,MAMpBC,qDAAiB,SAAAC,EAAOf,EAAIC,GAAX,OAAAe,EAAArB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAKEC,EAAKV,MAAMC,OAAOU,IAAI,SAAAlB,GACrC,OAAOA,KAKLiB,EAAKV,MAAME,eAAeU,SAASvB,GAXxB,CAAAkB,EAAAE,KAAA,QAYbI,MAAM,0DACLH,EAAKI,SAAS,CACbjB,aAAc,EACdK,eAAgB,KAfLK,EAAAE,KAAA,sBAAAF,EAAAE,KAAA,EAkBNC,EAAKI,SAAS,CACnBjB,aAAca,EAAKV,MAAMH,aAAe,EAExCK,eAAc,GAAAa,OAAAC,OAAAC,EAAA,EAAAD,CAAMN,EAAKV,MAAME,gBAAjB,CAAiCb,MArBpC,OAwBTqB,EAAKV,MAAMH,aAAea,EAAKV,MAAMF,WACvCY,EAAKI,SAAS,CACZhB,UAAWY,EAAKV,MAAMH,eA1Bb,OAiCfqB,QAAQC,IAAIT,EAAKV,MAAME,gBAjCR,yBAAAK,EAAAa,SAAAhB,EAAAiB,mEAsCjBC,OAAS,SAACC,GACR,OAAQA,EAAIC,KAAK,SAASxC,EAAGyC,GAAI,MAAO,GAAMC,KAAKJ,oFAI5C,IAAAK,EAAAN,KAEP,OACEtC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OAEbR,EAAAC,EAAAC,cAAC2C,EAAD,CAAQ9B,UAAauB,KAAKrB,MAAMF,UAAWD,aAAgBwB,KAAKrB,MAAMH,eACtEd,EAAAC,EAAAC,cAAA,KAAGI,GAAG,gBAAN,mFAEAN,EAAAC,EAAAC,cAAA,OAAKM,UAAU,eAAeF,GAAG,iBAGhCgC,KAAKC,OAAOD,KAAKrB,MAAMC,QAAQU,IAAI,SAAAlB,GAAK,OACvCV,EAAAC,EAAAC,cAAC4C,EAAD,CACAC,IAAKrC,EAAMJ,GACXA,GAAII,EAAMJ,GACVI,MAAOA,EAAMsC,IACbzC,QAASG,EAAMH,QACfF,YAAeuC,EAAKxB,4BAxEZ6B,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e139fd3d.chunk.js","sourcesContent":["import React from 'react';\n\n\n// Each character needs to be loaded onto the page in random order.\n\n\nconst  Cards = (props) =>\n  ( <>\n        <img onClick = {() => props.handleClick(props.id, props.clicked)} className=\"imgCard\" src={props.image} alt=\"\"/>\n    </>\n    );\n\nexport default Cards;\n","import React from \"react\";\n\nconst NavBar = (props) =>\n      (<>\n        <nav className=\"navbar\">\n          <a className=\"navbar-brand\" href=\"/\">\n            <h1>Zombie Memory</h1>\n          </a>\n          <div id=\"scores\">\n            <p><span className=\"scoreText\">Score: </span> {props.currentScore}</p>\n            <p><span className=\"scoreText\">Top Score: </span> {props.highScore}</p>\n          </div>\n        </nav>\n      </>)\n    \n  \n\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport Cards from \"./components/Cards/cards\";\nimport NavBar from \"./components/Nav/navBar\";\nimport images from \"./images.json\";\nimport \"./App.css\"\n\nclass App extends Component {\n\n    state = {\n      images,\n      highScore: 0,\n      currentScore: 0,\n      alreadyClicked: []\n\n    }\n\n  \n\n  handleImgClick = async (id, clicked) => { \n   \n    // When the image is clicked, take that image id and change the clicked boolean value to true\n    \n    // Take the current score and add one before setting a new\n    const newArray = this.state.images.map(image => {\n      return image\n    });\n    \n\n    // If the image clicked is = false then add 1 to the state.current score and shuffle the images. \n    if (this.state.alreadyClicked.includes(id)) {\n      alert(\"You already clicked that one! Press OK to restart game\")\n       this.setState({\n        currentScore: 0,\n        alreadyClicked: []\n      }) \n    } else {\n       await this.setState({\n        currentScore: this.state.currentScore + 1,\n        // take a copy arr and then create a new array with the addeed new ID\n        alreadyClicked: [...this.state.alreadyClicked, id]\n      });\n\n      if (this.state.currentScore > this.state.highScore) {\n        this.setState({\n          highScore: this.state.currentScore\n        })\n        \n      }\n    }\n    \n\n    console.log(this.state.alreadyClicked);\n\n    \n  }\n\n  random = (arr)  => {\n    return (arr.sort(function(a, b) {return 0.5 - Math.random()}));\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n      {/* Render the Navbar functional component and pass it the high score/current score state as props */}\n        <NavBar highScore = {this.state.highScore} currentScore = {this.state.currentScore} />\n        <p id=\"instructions\"> Click a character card to earn points, click the same card twice and you lose.</p>\n        {/* Create a new div for the img card to add flex CSS */}\n        <div className=\"characterDiv\" id=\"mainContainer\">\n        {/* Render each img from the images.json file in random order */}\n        \n        {this.random(this.state.images).map(image => (\n          <Cards  \n          key={image.id}\n          id={image.id}\n          image={image.img}\n          clicked={image.clicked}\n          handleClick = {this.handleImgClick}\n          \n          />\n        ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}